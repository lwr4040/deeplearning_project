# -*- coding: utf-8 -*-
"""인공지능 세미나 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14fDCjjw6z1wpKJC0ez_JPMOzx8pwgU0s
"""

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
plt.rc('font',family='NanumBarunGothic')

data= pd.read_csv("최영준_심박수 (2).csv")
data.rename(columns={"시간":"time"},inplace=True)
data.rename(columns={"심박수":"heartrate"},inplace=True)
data.rename(columns={"졸음 여부":"drowneiss"},inplace=True)
print(data)

from statsmodels.tsa.arima_model import ARIMA
import statsmodels.api as sm

model=ARIMA(data.heartrate.values, order=(2,1,5))
model_fit=model.fit(trend='c', full_output=True, disp=True)
print(model_fit.summary())

fig=model_fit.plot_predict()

residuals=pd.DataFrame(model_fit.resid)
print(residuals)
residuals.plot(title="difference of reality and prediction")

forecast_data=model_fit.forecast(steps=10)

pred_arima_y= forecast_data[0].tolist()

test_y= data.heartrate.values
test_y=test_y[2712:]
pred_y_lower=[]
pred_y_upper=[]

for lower_upper in forecast_data[2]:
  lower=lower_upper[0]
  upper=lower_upper[1]
  pred_y_lower.append(lower)
  pred_y_upper.append(upper)
print(pred_arima_y)

plt.figure(figsize=(20,10))
plt.plot(pred_y_lower, color='red')
plt.plot(pred_arima_y, color='gold')
plt.plot(pred_y_upper,color='blue')
plt.plot(test_y,color='green')

plt.legend(['min','forecast','max','real'])

for prediction in pred_arima_y:
  if prediction < 65:
    print('졸음')
  elif prediction <73:
    print('졸음 의심')
  elif prediction<96:
    print('평상시')
  else :
    print('심박수 높음')

from fbprophet import Prophet
print(data)
df_sample=data.loc[:,['heartrate']]

print(df_sample)
df_sample=df_sample.reset_index()
df_sample.columns=['ds','y']
print(df_sample)
df_sample_train=df_sample[:2722]
df_sample_test=df_sample[2722:]
prophet = Prophet(seasonality_mode = 'multiplicative',
                 yearly_seasonality=True, 
                 weekly_seasonality=True,
                 daily_seasonality=True,
                 changepoint_prior_scale=0.5)

prophet.fit(df_sample_train)